#Requires AutoHotkey v2.0
CoordMode "Pixel", "Screen"

DEBUG_MODE := 1
global KEY_DELAY := 35
global SKILL_DELAY := 70

SAY_BOX_X := 879
SAY_BOX_Y := 1379

BOX_MAX_POINT_X := 2220
BOX_LOWER_POINT_X := 2485
PORTION_MAX := BOX_LOWER_POINT_X - BOX_MAX_POINT_X

HP_BOX_MIDDLE_Y := 1228 ; 1216 1241
MP_BOX_MIDDLE_Y := 1267

HP_MIDDLE_COLOR := 0xFF4D00
MP_MIDDLE_COLOR := 0xADBED6

UI_X_POSITION_PERCENT := 0.0683
UI_Y_POSITION_PERCENT := 0.78
global HOTKEY_TOGGLE := False


global AUTO_DEBUFF := false
global RUNNING_STATUS := false
global timerToggle := false
global selfhealMode := false
global NEED_TO_HEEWON := false

global timerStart := 0 ; 타이머 시작 시간

UI_X_START := A_ScreenWidth * UI_X_POSITION_PERCENT
UI_Y_START := A_ScreenHeight * UI_Y_POSITION_PERCENT

/*
디버그 로그 출력
*/
OutputDebug '바람의나라 도사 헬퍼 시작`n'
OutputDebug A_ScriptDir "`n"
OutputDebug "스크린 너비" A_ScreenWidth "스크린 높이" A_ScreenHeight "`n"


/*
스킬 설정
gongjeung 공증
heal 기원
hon 혼마
*/

gongjeung := 2
heal := 3
hon := 4
MP_POTION := "z"

BaramGui := Gui(, "Baram Helper")
BaramGui.Opt("-Caption +AlwaysOnTop +E0x20")
global statusText := BaramGui.Add("Text", "x0 y5 w150", "도사 헬퍼")
global toggleText := BaramGui.Add("Text", "x150 y5 w120", "반복 : OFF")
global debufToggleText := BaramGui.Add("Text", "x300 y5 w120", "디버프 : OFF")
global selfHealToggleText := BaramGui.Add("Text", "x450 y5 w120", "자가회복 : OFF")
global altText := BaramGui.Add("Text", "x0 y25 w120", "채팅모드")
BaramGui.Add("Text", "x150 y25", "F1: 희원, F2: 온오프, F3: 디버프, F4: 리로드 ,ctrl+F4: 종료, MB4: 타겟 저주, F7: 타이머 on off")
global guiTimer := BaramGui.Add("Text", "x810 y5 w400	", "시간 : " FormatTime(A_Now, "yy/MM/dd HH:mm:ss"))
BaramGui.Show("x" UI_X_START " y" UI_Y_START " w1100 h40")
SetTimer(timeFunc, 1000)

debugLog(msg) {
    if (DEBUG_MODE) {
        OutputDebug(msg "`n")
    }
    else return
}


existSaybox() {
    color := PixelGetColor(SAY_BOX_X, SAY_BOX_Y)
    if (color = 0xFFFFFF) {
        return true
    }
    else {
        return false
    }
}

useItemBySlot(slot) {
    Send("{Ctrl down}")
    Sleep(10)
    Send(slot)
    Sleep(10)
    Send("{Ctrl up}")
}

useSkillbyAlpabet(skill_key) {
    Send("{Shift down}")
    Sleep(20)
    Send("z")
    Sleep(20)
    Send("{Shift up}")
    Sleep(25)
    Send(skill_key)
}

getHpPortion() {
    st := A_TickCount
    finded_x := -1
    finded_y := -1
    if PixelSearch(&finded_x, &finded_y, BOX_MAX_POINT_X, HP_BOX_MIDDLE_Y - 12, BOX_LOWER_POINT_X, HP_BOX_MIDDLE_Y + 12, HP_MIDDLE_COLOR, 10) {
        return Round((1 - (finded_x - BOX_MAX_POINT_X) / PORTION_MAX) * 100, 0)
    }
    else {
        return 0.0
    }
}

getMpPortion() {
    finded_x := -1
    finded_y := -1
    if PixelSearch(&finded_x, &finded_y, BOX_MAX_POINT_X, MP_BOX_MIDDLE_Y - 12, BOX_LOWER_POINT_X, MP_BOX_MIDDLE_Y + 12, MP_MIDDLE_COLOR, 10) {
        return Round((1 - (finded_x - BOX_MAX_POINT_X) / PORTION_MAX) * 100, 0)
    }
    else {
        return 0.0
    }
}


fixTargetTab() {
    Send("{Esc}")
    Sleep(KEY_DELAY)
    Send("{Tab}")
    Sleep(KEY_DELAY+15)
    Send("{Tab}")
    Sleep(KEY_DELAY)
}

selfHeal(count := 1) {
    Send("{Esc}")
    Sleep(KEY_DELAY)
    Send("{" heal "}")
    loop KEY_DELAY {
        if existSaybox() {
            break
        }
        Sleep(1)
    }
    Send("{Home}")
    Sleep(KEY_DELAY)
    Send("{Enter}")
    Sleep(SKILL_DELAY)
    count--
    loop count {
        OutputDebug "heal`n"
        Send("{" heal "}")
        loop KEY_DELAY {
            if existSaybox() {
                break
            }
            Sleep(1)
        }
        Send("{Enter}")
        Sleep(SKILL_DELAY)
    }
}


autoTargetCastSpell(skill, direction_left := true) {
    Send("{" skill " down}")
    loop 50 {
        if existSaybox() {
            if direction_left {
                Send("{left down}")
            } else {
                Send("{right down}")
            }
            Sleep(35)
            Send("{Enter down}")
            break
        }
        Sleep(1)
    }
    return (skill, direction_left)
}

allKeyUp() {
    Send("{Enter up}")
    Sleep(10)
    Send("{4 up}")
    Sleep(10)
    Send("{Left up}")
    Sleep(10)
    Send("{Right up}")
    Sleep(10)
    Send("{Esc}")
}


XButton1:: {
    Send("{Esc}")
    Sleep(KEY_DELAY)
    Send("{" hon "}")
    Loop 50 {
        if existSaybox() {
            break
        }
        Sleep(1)
    }
    Send("{Lbutton}")
    Sleep(KEY_DELAY + 10)
    loop 50 {
        if existSaybox() {
            break
        }
        else {
            Sleep(1)
        }
    }
    Send("{Enter}")
    Sleep(KEY_DELAY)
    fixTargetTab()
}


XButton2:: {
    global RUNNING_STATUS := false
    Send("{Esc}")
    Sleep(35)
    Send("{Tab}")
    Sleep(35)
    Click()
    Sleep(35)
    Send("{Tab}")
    Sleep(35)
}


q:: {
    Send("{Esc}")
    Sleep(KEY_DELAY)
    autoTargetCastSpell(hon)
}

e:: {
    allKeyUp()
}

t:: {
    global RUNNING_STATUS := false
    Sleep(50)
    Send("{Esc}")
    Sleep(KEY_DELAY)
    useSkillbyAlpabet("r")
}

b:: {
    global RUNNING_STATUS := false
    fixTargetTab()
    Send("9")
    Sleep(35)
    Send("8")
    Sleep(35)
    Send("7")
    Sleep(35)
    useItemBySlot("z")
    loop 12 {
        Sleep(35)
        Send(gongjeung)
        Sleep(100)
        if getMpPortion() > 30 {
            break
        }
        else {
            Sleep(35)
        }
        useItemBySlot("z")
    }

}

F1::{
    global NEED_TO_HEEWON := true
}

F2:: {
    global RUNNING_STATUS := !RUNNING_STATUS
    toggleText.Text := RUNNING_STATUS ? "반복 : ON" : "반복 : OFF"
}

F3:: {
    global AUTO_DEBUFF := !AUTO_DEBUFF
    debufToggleText.Text := AUTO_DEBUFF ? "디버프 : ON" : "디버프 : OFF"
}
F4:: Reload
^F4:: ExitApp

`:: {
    selfHeal(2)
    fixTargetTab()
    global selfhealMode := !selfhealMode
    selfHealToggleText.Text := selfhealMode ? "자가회복 : ON" : "자가회복 : OFF"
}

leftSpell(spellkey) {
    Send("{" spellkey " down}")
    Sleep(KEY_DELAY)
    Send("{Left down}")
    Sleep(KEY_DELAY)
    Send("{Enter down}")
    Sleep(KEY_DELAY)
}

rightSpell(spellkey) {
    Send("{" spellkey " down}")
    Sleep(KEY_DELAY)
    Send("{Right down}")
    Sleep(KEY_DELAY)
    Send("{Enter down}")
    Sleep(KEY_DELAY)
}

keyUp(spellkey) {
    Send("{" spellkey " up}")
    Send("{Left up}")
    Send("{Right up}")
    Send("{Enter up}")
}

millisecToTime(msec) {
    secs := floor(mod((msec / 1000), 60))
    mins := floor(mod((msec / (1000 * 60)), 60))
    hour := floor(mod((msec / (1000 * 60 * 60)), 24))
    return Format("{:02}:{:02}:{:02}", hour, mins, secs)
}

timerFunc() {

    guiTimer.Text := "타이머: " millisecToTime(A_TickCount - timerStart)
}

timeFunc() {
    guiTimer.Text := "시간 : " FormatTime(A_Now, "yy/MM/dd HH:mm:ss")
}


toggleHotkey() {
    if HOTKEY_TOGGLE {
        global HOTKEY_TOGGLE := False
        altText.Text := "채팅모드"
        Hotkey("q", "Off")
        Hotkey("e", "Off")
        Hotkey("t", "Off")
        Hotkey("b", "Off")
    }
    else {
        global HOTKEY_TOGGLE := True
        altText.Text := "단축키모드"
        Hotkey("q", "On")
        Hotkey("e", "On")
        Hotkey("t", "On")
        Hotkey("b", "On")
    }
}

^CapsLock:: {
    toggleHotkey()
}


~':: {
    if HOTKEY_TOGGLE {
        toggleHotkey()
    }
}

F6:: {
    loop 3 {
        OutputDebug "heal`n"
        Send(heal)
        Sleep(50)
    }
    OutputDebug "boho 3`n"
    Send("8")
    Sleep(50)
}
F7:: {
    ; 타이머가 이미 켜져 있을 경우 초기화하고 종료, 켜져 있지 않으면 켜기
    if (timerToggle) {
        global timerToggle := false
        SetTimer(timerFunc, 0)
        SetTimer(timeFunc, 1000)
    }
    else {
        global timerToggle := true
        SetTimer(timeFunc, 0)
        global timerStart := A_TickCount
        SetTimer(timerFunc, 200)
    }
}


Hotkey("q", "Off")
Hotkey("e", "Off")
Hotkey("t", "off")
Hotkey("b", "off")

statusText.Text := "도사 헬퍼 - 밀대 모드"
Loop {
    if RUNNING_STATUS {
        if (existSaybox()) {
            fixTargetTab()
        }
        if NEED_TO_HEEWON{
            Send("1")
            Sleep(35)
            global NEED_TO_HEEWON := false
        }
        Loop 3 {
            Send("{" heal "}")
            Sleep(SKILL_DELAY)
        }
        if AUTO_DEBUFF {
            Send("{Esc}")
            Sleep(KEY_DELAY)
            Send("{" hon "}")
            loop KEY_DELAY {
                if existSaybox() {
                    break
                }
                Sleep(1)
            }
            Send("{left}")
            Sleep(KEY_DELAY)
            Send("{Enter}")
            fixTargetTab()
        }
        if getMpPortion() < 30 {
            Send("{" gongjeung "}")
        }
        if selfhealMode {
            if getHpPortion() < 30 {
                selfHeal(1)
                fixTargetTab()
            }
        }

    }
    Sleep(20)
}